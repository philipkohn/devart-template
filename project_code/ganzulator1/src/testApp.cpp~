#include "testApp.h"


/*
ideas:

use speakers to vibrate body directly or through air compression waves at alpha frequency

add modulation of whole thing at 1 Hz

 
  */

// timing parameters
float alpha_freq_low = 8.0;
float alpha_freq_high = 14.0;
float burst_time = 5.0;
float cycle_time = 4.0;

int seq_low_alpha = 2;
int seq_ramp_alpha = 8;
int seq_high_alpha = 4;
int seq_skip = 10;

// video
const int checkerboard_size = 30;
const int num_noise_image = 3;

int checkerboard_amp = 8;
int picture_lum = 16;
int word_amp = 8;
int noise_amp = 4;
int checkerboard_lum = 255 - 8 - 16 - 8 - 4;


// audio
int num_burst_sound;
float noise_burst_amp = 0.3;
float noise_volume = 0.6;
float burst_sound_voume = 0.1;

//--------------------------------------------------------------
void testApp::setup() {
  

  ofImage image;
  unsigned char *pp;
  ofDirectory dir;
  
  // VIDEO SETUP
  
  ofBackground(0);
  ofSetWindowTitle("ganzulator1");
  
  ofSetFullscreen(true);
  
  display_width = ofGetWidth();
  display_height = ofGetHeight();
  
  for(int i=0; i<num_noise_image; i++) {
    image = ofImage();
    image.allocate(display_width, display_height, OF_IMAGE_COLOR);
    pp = image.getPixels();
    for(int j = 0; j < image.width * image.height; j++) {
      pp[j*3] = rand() % noise_amp;   // red
      pp[j*3+1] = 0;
      pp[j*3+2] = 0;
    }
    image.reloadTexture();
    noise_images.push_back(image);
  }
  
  
  // make a flickering checkerboard (classic neuroimaging stimulus)
  // using something with random curves (some with high curvature) would be better for 
  //  activating higher visual regions, and probably better for this project
  // also could put in subliminal words and pictures if this thing starts to work
  
  for(int i=0; i<2; i++) {
    image = ofImage();
    image.allocate(display_width, display_height, OF_IMAGE_COLOR);
    pp = image.getPixels();
    for(int y = 0; y < image.height; y++) {
      for(int x = 0; x < image.width; x++, pp += 3) {
	if (i ^ ((x / checkerboard_size) % 2) ^ ((y / checkerboard_size) % 2)) {
          pp[0] = checkboard_lum; pp[1] = pp[2] = 0;
	  //	    pp[0] = pp[1] = pp[2] = 255;
	} else {
          pp[0] = checkboard_lum + checkboard_amp; pp[1] = pp[2] = 0;
	  //	    pp[0] = pp[1] = pp[2] = 0;
	}
      }
    }
    image.reloadTexture();
    burst_images.push_back(image);
  }
  
  num_picture = dir.listDir("pictures");
  for(int i = 0; i < num_picture; i++) {
    string filePath = dir.getPath(i);
    image = ofImage();
    image.loadImage(filePath);
    pp = image.getPixels();
    for(int y = 0; y < image.height; y++) {
      for(int x = 0; x < image.width; x++, pp += 3) {
	if (pp[0] > 253 && pp[1] > 253 && pp[2] > 253) {
	  pp[0] = 0;
	} else {
	  pp[0] = (int)(((float)picture_lum / 255.0) * (0.299 * pp[0] + 0.587 * pp[1] + 0.114 * pp[2]));
	}
	pp[1] = pp[2] = 0;
      }
    }
    image.reloadTexture();
    pictures.push_back(image);
  }
  
  font.loadFont("verdana.ttf", 30, false);
  //  font.loadFont("frabk.ttf", 30, false);
  font.setLetterSpacing(1.037);

  ofFile file("words.txt");
  num_word = 0;
  if (file.exists()) {
    
    ofBuffer buffer(file);

    while (! buffer.isLastLine()) {
      string line = buffer.getNextLine();
      words.push_back(line);
      num_word++;
    }
  }
  
  
  // set the app fps 
  appFPS = 60;
  ofSetFrameRate(appFPS);
  
  // AUDIO SETUP
  
  noise_sound.loadSound("sounds/noise.wav");
  noise_sound.setMultiPlay(false);
  noise_sound.setLoop(true);
  noise_sound.setPan(0.0);
  
  num_burst_sound = dir.listDir("burst_sounds");
  for(int i = 0; i < num_burst_sound; i++) {
    string filePath = dir.getPath(i);
    ofSoundPlayer sound;
    sound.loadSound(filePath);
    burst_sounds.push_back(sound);
  }
  
  noise_sound.setVolume(noise_volume);
  noise_sound.play();
  
  ready = true;
}

//--------------------------------------------------------------
void testApp::update() {
  
  if (! ready) {
    return;
  }
  
  // update the sound playing system:
  ofSoundUpdate();
  
}


//--------------------------------------------------------------
void testApp::draw() {
  
  unsigned long long t;
  unsigned long t_cycle;
  int seq;
  
  int burst_time_ms = ((int)(burst_time * 1000.0));
  int cycle_time_ms = ((int)(cycle_time * 1000.0));
  int seq_total = (seq_low_alpha + seq_ramp_alpha + seq_high_alpha + seq_skip);
  
  if (! ready) {
    return;
  }
  
  // use millisec resolution since display timing ain't that great anyway
  t = ofGetElapsedTimeMillis();
  
  // time in ms within cycle
  t_cycle = (t % cycle_time_ms);
  
  // keep track of alpha cycle even though alph_freq could be changing
  // check units: (ms * cycle/sec) / (ms/sec) = (ms * cycle/sec * sec/ms) = cycle
  t_alpha += ((t - prev_t) * alpha_freq) / 1000.0;
  prev_t = t;
  
  // keep resolution reasonable
  if (t_alpha > 1e6) {
    t_alpha -= (1000000 / (int)alpha_freq) * alpha_freq;
  }
  
  // figure which burst of the sequence
  seq = ((t / cycle_time_ms) % seq_total);
  
  // figure out alpha freq for this burst
  if (seq < seq_low_alpha) {
    alpha_freq = alpha_freq_low;
  } else if (seq < seq_low_alpha + seq_ramp_alpha) {
    alpha_freq = alpha_freq_low
      + (alpha_freq_high - alpha_freq_low) * ( (float)(seq - seq_low_alpha) / (float)seq_ramp_alpha);
  } else if (seq < seq_low_alpha + seq_ramp_alpha + seq_high_alpha) {
    alpha_freq = alpha_freq_high;
  } else {
    alpha_freq = 0.0; // skip
  }
  
  if (t_cycle < burst_time_ms && alpha_freq > 0.0) {
    // inside a burst
    int flicker;
    
    flicker = ((int) (t_alpha * 2.0)) % 2;
    
    ofSetColor(255);
    burst_images[flicker].draw(0,0);
      
    if (flicker) {
      in_flicker = true;

      noise_sound.setVolume(noise_volume + noise_burst_amp/2.0);
      noise_sound.setPan(0.3 - 0.6 * ((int)t_alpha % 2));

      if (num_burst_sound > 0) {
	int s = rand() % num_burst_sound;
	burst_sounds[s].setVolume(burst_sound_volume);
	burst_sounds[s].play();
      }

      int n, r;
      float scale;

      ofEnableBlendMode(OF_BLENDMODE_ADD);

      noise_images[rand() % num_noise_image].draw(0,0);

      n = rand() % 6;
      for(int i=0; i<n; i++) {
          r = (int)(rand() % num_picture);
          scale = ((float)((rand() % 25) + 5) / 100.0) * display_width / (float)pictures[r].width;
          pictures[r].draw((int)(rand() % (display_width - pictures[r].width * scale)),
                           (int)(rand() % (display_height - pictures[r].height * scale)),
                           pictures[r].width * scale,
                           pictures[r].height * scale);
      }

      if (num_word > 0) {
	string word;
	ofSetColor(word_amp, 0, 0);
	n = rand() % 2;
	for(int i=0; i<n; i++) {
	  word = words[rand() % num_word];
	  font.drawString(word, 
			  rand() % (display_width - font.stringWidth(word)),
			  rand() % (display_height - font.stringHeight(word)));
	}
	ofSetColor(255);
      }
			  
      ofDisableBlendMode();

    } else {
      if (in_flicker) {
	flicker_count++;
	in_flicker = false;
      }
      noise_sound.setVolume(noise_volume - noise_burst_amp/2.0);
      noise_sound.setPan(0.3 - 0.6 * ((1 + (int)t_alpha) % 2));
    }

    if (! in_burst) {
      flicker_count = 0;
    }
    in_burst = true;
    
  } else {
    // not in burst
    
    // video noise
    noise_images[rand() % num_noise_image].draw(0,0);
    
    if (in_burst) {
      in_flicker = false;
      noise_sound.setVolume(noise_volume);
    }
    in_burst = false;
    
  }
  
  return;
  
  static int num_frame = 0;
  static long long last_report = 0;
  static float fps = 0.0;
  
  if (t - last_report > 5000) {
    fps = (num_frame * 1000.0) / (t - last_report);
    last_report = t;
    num_frame = 0;
  }
  num_frame++;
  
  // how fast is the app running and some other info
  ofSetColor(50);
  ofRect(0, 0, 300, 100);
  ofSetColor(200);
  string info;
  info += ofToString(fps)+" real fps\n";
  info += "appFPS="+ofToString(appFPS)+"  ofGetFrameRate="+ofToString(ofGetFrameRate(), 0)+" fps\n";
  info += ofToString(flicker_count)+" flicker count\n\n";
  
  ofDrawBitmapString(info, 15, 20);
  
  
}



//--------------------------------------------------------------
void testApp::keyPressed(int key){
  
  
#if 0
  if(key == OF_KEY_UP)      appFPS ++;
  if(key == OF_KEY_DOWN)    appFPS --;
  if(key == OF_KEY_LEFT)    sequenceFPS --;
  if(key == OF_KEY_RIGHT)   sequenceFPS ++;    
  if(key == 't')            bFrameIndependent = !bFrameIndependent;
  
  // check for less than zero...
  sequenceFPS = MAX(sequenceFPS, 1);
  appFPS      = MAX(appFPS, 1);
  
  ofSetFrameRate(appFPS);
#endif
  
}

//--------------------------------------------------------------
void testApp::keyReleased(int key){
  
}

//--------------------------------------------------------------
void testApp::mouseMoved(int x, int y ){
  
}

//--------------------------------------------------------------
void testApp::mouseDragged(int x, int y, int button){
  
}

//--------------------------------------------------------------
void testApp::mousePressed(int x, int y, int button){
  
}

//--------------------------------------------------------------
void testApp::mouseReleased(int x, int y, int button){
  
}

//--------------------------------------------------------------
void testApp::windowResized(int w, int h){
  
}

//--------------------------------------------------------------
void testApp::gotMessage(ofMessage msg){
  
}

//--------------------------------------------------------------
void testApp::dragEvent(ofDragInfo dragInfo){ 
    
}
