#include "testApp.h"


/*
 
  */

// timing parameters
float alpha_freq_low = 8.0;
float alpha_freq_high = 11.0;
float burst_time = 1.5;
float cycle_time = 15.0;

int seq_low_alpha = 4;
int seq_ramp_alpha = 4;
int seq_high_alpha = 4;
int seq_skip = 4;

// video
const int num_noise_image = 20;
const int checkerboard_size = 32;
int noise_lum = 128;
int noise_amp = 16;

// audio
int num_burst_sound;
int noise_burst_volume = 0.9;
int noise_volume = 0.1;


//--------------------------------------------------------------
void testApp::setup() {
    

    ofImage image;
    unsigned char *pp;

    // VIDEO SETUP

    ofBackground(0);
    ofSetWindowTitle("ganzulator1");
                     
    ofSetFullscreen(true);

    display_width = ofGetWidth();
    display_height = ofGetHeight();

    for(int i=0; i<num_noise_image; i++) {
      image = ofImage();
      image.allocate(display_width, display_height, OF_IMAGE_COLOR);
      pp = image.getPixels();
      for(int j = 0; j < image.width * image.height; j++) {
	pp[j*3] = noise_lum - noise_amp/2 + (rand() % noise_amp);   // red
	pp[j*3+1] = 0;
	pp[j*3+2] = 0;
      }
      image.reloadTexture();
      noise_images.push_back(image);
    }
    

    // make a flickering checkerboard (classic neuroimaging stimulus)
    // using something with random curves (some with high curvature) would be better for 
    //  activating higher visual regions, and probably better for this project
    // also could put in subliminal words and pictures if this thing starts to work

    for(int i=0; i<2; i++) {
      image = ofImage();
      image.allocate(display_width, display_height, OF_IMAGE_COLOR);
      pp = image.getPixels();
      for(int y = 0; y < image.height; y++) {
	for(int x = 0; x < image.width; x++, pp += 3) {
	  if (i ^ ((x / checkerboard_size) % 2) ^ ((y / checkerboard_size) % 2)) {
	    pp[0] = pp[1] = pp[2] = 255;
	  } else {
	    pp[0] = pp[1] = pp[2] = 0;
	  }
	}
      }
      image.reloadTexture();
      burst_images.push_back(image);
    }

    // set the app fps 
    appFPS = 60;
    ofSetFrameRate(appFPS);
    
    // AUDIO SETUP

    noise_sound.loadSound("sounds/noise.wav");
    noise_sound.setMultiPlay(false);

    ofDirectory dir;
    num_burst_sound = dir.ListDir("burst_sounds");
    for(int i = 0; i < num_burst_sound; i++) {
      string filePath = dir.getPath(i);
      ofSound sound;
      sound.loadSound(filePath);
      burst_sounds.push_back(sound);
    }

    ready = TRUE;
}

//--------------------------------------------------------------
void testApp::update() {

  if (! ready) {
    return;
  }

  // update the sound playing system:
  ofSoundUpdate();
  
}


//--------------------------------------------------------------
void testApp::draw() {
    
  unsigned long long t;
  unsigned long t_cycle;
  float t_alpha;
  float freq;
  int seq;

  int burst_time_ms = ((int)(burst_time * 1000.0));
  int cycle_time_ms = ((int)(cycle_time * 1000.0));
  int seq_total = (seq_low_alpha + seq_ramp_alpha + seq_high_alpha + seq_skip);
  
  if (! ready) {
    return;
  }

  // use millisec resolution since display timing ain't that great anyway
  t = ofGetElapsedTimeMillis();

  // time in ms within cycle
  t_cycle = (t % cycle_time_ms);
  
  if (t_cycle < burst_time_ms) {
    // inside a burst

    // figure which burst of the sequence
    seq = ((t / cycle_time_ms) % seq_total);

    // figure out alpha freq for this burst
    if (seq < seq_low_alpha) {
      freq = alpha_freq_low;
    } else if (seq < seq_low_alpha + seq_ramp_alpha) {
      freq = alpha_freq_low + (alpha_freq_high - alpha_freq_low) * ( (float)(seq - seq_low_alpha) / (float)seq_ramp_alpha);
    } else if (seq < seq_low_alpha + seq_ramp_alpha + seq_high_alpha) {
      freq = alpha_freq_high;
    } else {
      freq = 0.0; // skip
    }

    if (freq > 0.0) {
      int flicker;

      // time in alpha cycles
      t_alpha = (int)((t_cycle * freq) / 1000.0);  // (ms * cycle/sec) / (ms/sec) = (ms * cycle/sec * sec/ms) = cycle
      flicker = ((int) t_alpha) % 2;

      ofSetColor(255);
      burst_images[flicker].draw(0,0);

      if (flicker) {
	noise_sound.setLoop(TRUE);
	noise_sound.setVolume(noise_burst_volume);
	noise_sound.setPan(0.0);
	noise_sound.play();
      } else {
	noise_sound.stop();
      }

    } else {

      ofSetColor(0);
      burst_images[0].draw(0,0); // black
      
      ofSoundStopAll();

    }

  } else {
    // not in burst

    // video noise
    ofSetColor(255);
    noise_images[rand() % num_noise_image].draw(0,0);

    if (! noise_sound.getIsPlaying()) {
      noise_sound.setLoop(TRUE);
      noise_sound.setVolume(noise_volume);
      noise_sound.setPan(0.0);
      noise_sound.play();
    }
  }


  return;
    
  // not used

  // keep this stuff for later

    // how fast is the app running and some other info
    ofSetColor(50);
    ofRect(0, 0, 200, 200);
    ofSetColor(200);
    string info;
    info += ofToString(frameIndex)+" sequence index\n";
    info += ofToString(appFPS)+"/"+ofToString(ofGetFrameRate(), 0)+" fps\n";
    info += ofToString(sequenceFPS)+" Sequence fps\n\n";
    info += "Keys:\nup & down arrows to\nchange app fps\n\n";
    info += "left & right arrows to\nchange sequence fps";
    info += "\n\n't' to toggle\nframe independent("+ofToString(bFrameIndependent)+")";
    
    ofDrawBitmapString(info, 15, 20);
}

//--------------------------------------------------------------
void testApp::keyPressed(int key){
    
    
#if 0
    if(key == OF_KEY_UP)      appFPS ++;
    if(key == OF_KEY_DOWN)    appFPS --;
    if(key == OF_KEY_LEFT)    sequenceFPS --;
    if(key == OF_KEY_RIGHT)   sequenceFPS ++;    
    if(key == 't')            bFrameIndependent = !bFrameIndependent;
    
    // check for less than zero...
    sequenceFPS = MAX(sequenceFPS, 1);
    appFPS      = MAX(appFPS, 1);
    
    ofSetFrameRate(appFPS);
#endif

}

//--------------------------------------------------------------
void testApp::keyReleased(int key){
    
}

//--------------------------------------------------------------
void testApp::mouseMoved(int x, int y ){
    
}

//--------------------------------------------------------------
void testApp::mouseDragged(int x, int y, int button){
    
}

//--------------------------------------------------------------
void testApp::mousePressed(int x, int y, int button){
    
}

//--------------------------------------------------------------
void testApp::mouseReleased(int x, int y, int button){
    
}

//--------------------------------------------------------------
void testApp::windowResized(int w, int h){
    
}

//--------------------------------------------------------------
void testApp::gotMessage(ofMessage msg){
    
}

//--------------------------------------------------------------
void testApp::dragEvent(ofDragInfo dragInfo){ 
    
}
